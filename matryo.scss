/*!*
 *
 * matryosass -- @quagliero
 * Infinitely nestable grids with as many fractional widths as you like
 */
/* ... use until CSS Grid Layouts become a reality http://www.w3.org/TR/2014/WD-css-grid-1-20140123/
 * Licensed with the 'do whatever you want with it' one.
 */

/*
 * $VARIABLES
 */

/*
 * $mg-gutter       -- the gap between each column
 * $mg-fractions    -- don't think in columns, think in fractions... how many you want?
 * $mg-border-box   -- this grid utilises the border-box model
 * http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 */

$mg-gutter      : 24px !default;
$mg-fractions   : 12 !default;
$mg-border-box  : true !default;   /* set to false if you've declared it globally elsewhere */

/*
 * Define your breakpoints
 *
 *   $mg-bp-{n}          -- enable/disable specific breakpoint
 *   $mg-bp-{n}-width    -- define a width for a breakpoint
 *   $mg-bp-{n}-name     -- give that breakpoint a name
 *   http://css-tricks.com/naming-media-queries/
 */

$mg-bp-xs          : true !default;
$mg-bp-xs-width    : 30em !default; /* ~480px (480/16) */
$mg-bp-xs-name     : 'xs' !default;

$mg-bp-sm          : true !default;
$mg-bp-sm-width    : 40em !default; /* ~640px (640/16) */
$mg-bp-sm-name     : 'sm' !default;

$mg-bp-md          : true !default;
$mg-bp-md-width    : 50em !default; /* ~800px (800/16) */
$mg-bp-md-name     : 'md' !default;

/*
 * This last one is used as a MIN-width media query
 * to target things > your largest breakpoint
 */

$mg-bp-lg          : true !default;
$mg-bp-lg-width    : 64em !default; /* ~1024px (1024/16) */
$mg-bp-lg-name     : 'lg' !default;

$mg-bp-xl         : true !default;
$mg-bp-xl-width   : 75em !default; /* ~1200px (1200/16)*/
$mg-bp-xl-name    : 'xl' !default;


/*
 * END $VARIABLES
 * You're all done! The whizzbangery happens below...
 */



/*
 * Build our grid with columns (and breakpoints)
 */
@mixin grid() {
    /*
     * Define the .grid to wrap our items in and
     * offset the gutter with a negative margin so
     * we don't need to use .last
     */
    .grid {
        margin-left: -$mg-gutter;

        &:after {
            content: "";
            display: table;
            clear: both;
        }
        /* if you want to nest, or reverse, outside of a .col */
        > .grid {
            margin-left: 0;
        }

    }

    /* No gutters, just a whole lot of grid */
    .grid--flush {
        @extend .grid;
        margin-left: 0;

        [class*='col-'] {
            padding-left: 0;
        }
    }

    /* Reverse the flow, useful for content ordering */
    .grid--rev {
        @extend .grid;

        [class*='col-'] {
            float: right;
        }
    }

    /*
     * Columns always have one .col- class
     * so give them a base style
     */
     [class*='col-'] {
        float: left;
        min-height: 1px; /* prevent collapsing columns */
        padding-left: $mg-gutter;
        @if $mg-border-box {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            -o-box-sizing: border-box;
            box-sizing: border-box;
        }
    }

    /*
     * Go get our column widths
     * and build our base grid with .col- prefix
     */

    @include cols('col');

        /*
         * Let's get busy break-pointin' and create
         * some suepr awsum namespaced responsive grid widths
         */
        @if $mg-bp-xl {
            @media (min-width: #{$mg-bp-xl-width}) {
                @include cols($mg-bp-xl-name);
            }
        }
        @if $mg-bp-lg {
            @media (min-width: #{$mg-bp-lg-width}) {
                @include cols($mg-bp-lg-name);
            }
        }
        @if $mg-bp-md {
            @media (max-width: #{$mg-bp-md-width}) {
                @include cols($mg-bp-md-name);
            }
        }
        @if $mg-bp-sm {
            @media (max-width: #{$mg-bp-sm-width}) {
                @include cols($mg-bp-sm-name);
            }
        }
        @if $mg-bp-xs {
            @media (max-width: #{$mg-bp-xs-width}) {
                @include cols($mg-bp-xs-name);
            }
        }

}


/*
 * Function to handle the building of columns
 * Set fractional based names for them e.g.
 * .col-1-2, .xs-3-8, .lg-4-5
 */
@mixin cols($namespace) {

    @for $i from 1 through $mg-fractions {
        @for $j from 1 through $i {
            @if $i != $j or $i == 1{
                .#{$namespace}-#{$j}-#{$i} {
                    width: percentage($j / $i);
                }
            }
        }
    }
    /* a helpful class to hide columns
     * e.g, .col-hide, .xl-hide, .md-hide
     */
    .#{$namespace}-hide {
        visibility: hidden;
        overflow: hidden;
        width: 0;
        height: 0;
        padding: 0;
    }
}


/*
 * Let us use those breakpoints elsewhere...
 * @if/@else if -- Try and match the media-query namespace and assign relevant widths
 * @else        -- so you can use it for custom queries if you wish
 */

@mixin media($namespace) {
    @if $namespace == $mg-bp-xl-name {
        @media (min-width: #{$mg-bp-xl-width}) {
            @content;
        }
    }
    @else if $namespace == $mg-bp-lg-name {
        @media (max-width: #{$mg-bp-lg-width}) {
            @content;
        }
    }
    @else if $namespace == $mg-bp-md-name {
        @media (max-width: #{$mg-bp-md-width}) {
            @content;
        }
    }
    @else if $namespace == $mg-bp-sm-name {
        @media (max-width: #{$mg-bp-sm-width}) {
            @content;
        }
    }
    @else if $namespace == $mg-bp-xs-name {
        @media (max-width: #{$mg-bp-xs-width}) {
            @content;
        }
    }
    @else {
        @media (#{$namespace}) {
            @content;
        }
    }
}

/*
 * Build our grid, yo
 */
@include grid();


/* Fin. */
