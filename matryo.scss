/*!*
 *
 * matryosass -- @quagliero
 * Infinitely nestable grids with as many fractional widths as you like
 * Licensed with the 'do whatever you want with it' one.
 */

/*
 * $VARIABLES
 */

/*
 *  $matryo-gutter       -- the gap between each column
 *  $matryo-fractions    -- don't think in columns, think in fractions... how many you want?
 *  $matryo-border-box   -- this grid utilises the border-box model
 *          http://www.paulirish.com/2012/box-sizing-border-box-ftw/
 *  $matryo-grid-class   -- Change the class name for the grid
 *  $matryo-col-class    -- Change the base class name for a column
 */

$matryo-gutter      : 24px !default;
$matryo-fractions   : 12 !default;      /* accepts a number or list of numbers */
$matryo-border-box  : true !default;    /* disable if already defined globally */
$matryo-grid-class  : 'grid' !default;
$matryo-col-class   : 'grid__col' !default;


/*
 * Define your breakpoints
 *
 *   $matryo-bp-{n}          -- enable/disable specific breakpoint
 *   $matryo-bp-{n}-width    -- define a width for a breakpoint
 *   $matryo-bp-{n}-name     -- give that breakpoint a name
 *   http://css-tricks.com/naming-media-queries/
 */

$matryo-bp-xs          : true !default;
$matryo-bp-xs-width    : 30em !default; /* ~480px (480/16) */
$matryo-bp-xs-name     : 'xs' !default;

$matryo-bp-sm          : true !default;
$matryo-bp-sm-width    : 40em !default; /* ~640px (640/16) */
$matryo-bp-sm-name     : 'sm' !default;

$matryo-bp-md          : true !default;
$matryo-bp-md-width    : 50em !default; /* ~800px (800/16) */
$matryo-bp-md-name     : 'md' !default;

$matryo-bp-lg          : true !default;
$matryo-bp-lg-width    : 64em !default; /* ~1024px (1024/16) */
$matryo-bp-lg-name     : 'lg' !default;

/*
 * This last one is used as a MIN-width media query
 * to target things > your largest breakpoint...
 */

$matryo-bp-xl         : true !default;
$matryo-bp-xl-width   : $matryo-bp-lg-width + .00001 !default; /* So it's not true for both*/
$matryo-bp-xl-name    : 'xl' !default;

/*
 * END $VARIABLES
 * You're all done! The whizzbangery happens below...
 */




/*
 * Build our grid with columns and (optional) breakpoints
 */
@mixin _grid() {
    /*
     * Define the grid to wrap our items in and offset the gutter with a
     * negative margin so we don't need to use .last or :last-of-type shenanigans
     */
    .#{$matryo-grid-class},
    %#{$matryo-grid-class} {
        margin-left: -$matryo-gutter;
        font-size: 0 !important; /* so our inline-block elements line up */

        /* Not commonly used, but covering the case when you
            might want to nest a grid within a grid (instead of within a column) */
        > .#{$matryo-grid-class},
        > .#{$matryo-grid-class}--rev {
            margin-left: 0;
        }

    }

    /* No gutters, just a whole lot of grid */
    .#{$matryo-grid-class}--flush {
        @extend %#{$matryo-grid-class};
        margin-left: 0;

        > .#{$matryo-col-class} {
            padding-left: 0;
        }
    }

    /* Reverse the flow, useful for content ordering */
    .#{$matryo-grid-class}--rev {
        @extend %#{$matryo-grid-class};

        direction: rtl;
    }

    /* Everybody get on the floor */
    .#{$matryo-grid-class}--bottom {
        @extend %#{$matryo-grid-class};

        > .#{$matryo-col-class} {
            vertical-align: bottom;
        }
    }

    /* Align columns across their horizontal axis  */
    .#{$matryo-grid-class}--middle {
        @extend %#{$matryo-grid-class};

        > .#{$matryo-col-class} {
            vertical-align: middle;
        }
    }

    /* Centre align all columns */
    .#{$matryo-grid-class}--center {
        @extend %#{$matryo-grid-class};

        text-align: center;
    }

    /*
     * Base column styles
     */
    .#{$matryo-col-class},
    %#{$matryo-col-class} {
        display: inline-block;
        vertical-align: top;
        font-size: 16px; /* IE8 fallback */
        font-size: 1rem;
        width: 100%;
        padding-left: $matryo-gutter;
        @if $matryo-border-box {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            -o-box-sizing: border-box;
            box-sizing: border-box;
        }
    }

    /* Centre align single column */
    .#{$matryo-col-class}--bottom {
        @extend %#{$matryo-col-class};

        vertical-align: bottom;
    }

    /* Horizontally align single column */
    .#{$matryo-col-class}--middle {
        @extend %#{$matryo-col-class};

        vertical-align: middle;
    }

    /* Centre align single column */
    .#{$matryo-col-class}--center {
        @extend %#{$matryo-col-class};

        margin: 0 auto;
    }



    /*
     * Go get our column widths
     * and build our base grid fraction classes with no prefix
     */

    @include _cols(null);

    /*
     * Let's get busy break-pointin' and create
     * some suepr awsum namespaced responsive grid widths
     */
    @if $matryo-bp-xl {
        @media (min-width: #{$matryo-bp-xl-width}) {
            @include _cols($matryo-bp-xl-name);
        }
    }
    @if $matryo-bp-lg {
        @media (max-width: #{$matryo-bp-lg-width}) {
            @include _cols($matryo-bp-lg-name);
        }
    }
    @if $matryo-bp-md {
        @media (max-width: #{$matryo-bp-md-width}) {
            @include _cols($matryo-bp-md-name);
        }
    }
    @if $matryo-bp-sm {
        @media (max-width: #{$matryo-bp-sm-width}) {
            @include _cols($matryo-bp-sm-name);
        }
    }
    @if $matryo-bp-xs {
        @media (max-width: #{$matryo-bp-xs-width}) {
            @include _cols($matryo-bp-xs-name);
        }
    }

}


/*
 * Function to handle the building of columns
 * defined in $matryo-fractions.
 *  via a defined number, e.g. 12 OR
 *  a collection of cols, e.g. 1,2,4,8
 *
 */
@mixin _cols($namespace) {

    @if $namespace {
        $namespace : $namespace + '-';
    }

    // Check for a list of cols
    @if type-of($matryo-fractions) == list {
        @each $i in $matryo-fractions {
            @for $j from 1 through $i {
                @include _col-classes($namespace, $j, $i);
            }
        }
    }
    // Otherwise treat is as number
    @elseif unitless($matryo-fractions) {
        @for $i from 1 through $matryo-fractions {
            @for $j from 1 through $i {
                @include _col-classes($namespace, $j, $i);
            }
        }
    }
    @else {
        @warn "$mg-fractions needs to be a unitless number or a list";
    }

    /* a helpful class to hide columns
     * e.g, .hide, .xl-hide, .md-hide
     */
    .#{$namespace}hide {
        visibility: hidden;
        overflow: hidden;
        width: 0;
        height: 0;
        padding: 0;
        margin: 0; /* shouldn't ever be needed, but just in case */
    }
}


/*
 * Set fractional based classes for namespaced columns
 * .1/2, .xs-3/8, .md-1, .lg-4/5
 *
 */
@mixin _col-classes($namespace, $j, $i) {

    @if $i != $j {
        [class~='#{$namespace}#{$j}/#{$i}'] {
            width: percentage($j / $i);
        }
    }

    @if $i == 1 and $namespace  {
        .#{$namespace}#{$j} {
            width: 100%;
        }
    }
}

/*
 * Build our grid, yo
 */
@include _grid();



/* PUBLIC Matryosass mixin(s) */

/*
 * Let us use our breakpoints for all content...
 * @if/@else if -- Try and match the media-query namespace and assign relevant widths
 * @else        -- so you can use it for custom queries if you wish
 */

@mixin media($namespace) {

    @if $namespace == $matryo-bp-xl-name {
        @media (min-width: #{$matryo-bp-xl-width}) {
            @content;
        }
    }
    @else if $namespace == $matryo-bp-lg-name {
        @media (max-width: #{$matryo-bp-lg-width}) {
            @content;
        }
    }
    @else if $namespace == $matryo-bp-md-name {
        @media (max-width: #{$matryo-bp-md-width}) {
            @content;
        }
    }
    @else if $namespace == $matryo-bp-sm-name {
        @media (max-width: #{$matryo-bp-sm-width}) {
            @content;
        }
    }
    @else if $namespace == $matryo-bp-xs-name {
        @media (max-width: #{$matryo-bp-xs-width}) {
            @content;
        }
    }
    @else {
        @media (#{$namespace}) {
            @content;
        }
    }
}


/* Fin. */
